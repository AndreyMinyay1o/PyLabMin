import re
import json

class Validator:
    @staticmethod
    def validate_surname(surname):
        if not surname.isalpha():
            raise ValueError("Фамилия должна состоять только из букв")
        return surname

    @staticmethod
    def validate_name(name):
        if not name.isalpha():
            raise ValueError("Имя должно состоять только из букв")
        return name

    @staticmethod
    def validate_phone(phone):
        if not phone.isdigit() or len(phone) != 10:
            raise ValueError("Номер телефона должен состоять из 10 цифр")
        return phone

class Client:
    def __init__(self, surname, name, patronymic, address, phone):
        self.surname = Validator.validate_surname(surname)
        self.name = Validator.validate_name(name)
        self.phone = Validator.validate_phone(phone)
        self.patronymic = patronymic
        self.address = address

    def validate(self):
        self.surname = self.validate_surname(self.surname)
        self.name = self.validate_name(self.name)
        self.phone = self.validate_phone(self.phone)

    def __str__(self):
        return f"{self.surname} {self.name[0]}. {self.patronymic[0]}."

    def __eq__(self, other):
        if not isinstance(other, Client):
            return False
        return self.phone == other.phone

    @classmethod
    def from_json(cls, json_data):
        return cls(**json_data)

    def short_version(self):
        return f"{self.surname} {self.name[0]}. {self.patronymic[0]}."

    def full_version(self):
        return f"{self.surname} {self.name} {self.patronymic}, Адрес: {self.address}, Телефон: {self.phone}"

class ShortClientInfo:
    def __init__(self, surname, name, phone):
        self.surname = surname
        self.name = name
        self.phone = phone

    def __str__(self):
        return f"{self.surname} {self.name[0]}. Телефон: {self.phone}"

class ClientInfo(ShortClientInfo, Client):
    def __init__(self, surname, name, patronymic, address, phone):
        Client.__init__(self, surname, name, patronymic, address, phone)
        ShortClientInfo.__init__(self, surname, name, phone)
class MyEntity_rep_json:
    def __init__(self, filename):
        self.filename = filename
        self.entities = self._read_from_json()

    def _read_from_json(self):
        try:
            with open(self.filename, "r", encoding="utf-8") as file:
                data = json.load(file) or []
                return data
        except FileNotFoundError:
            return []

    def _write_to_json(self):
        with open(self.filename, "w", encoding="utf-8") as file:
            json.dump(self.entities, file, ensure_ascii=False, indent=4)

    def get_by_id(self, entity_id):
        return next((entity for entity in self.entities if entity['id'] == entity_id), None)

    def get_k_n_short_list(self, k, n):
        return self.entities[(k - 1) * n : k * n]

    def sort_by_field(self, field):
        self.entities.sort(key=lambda x: x.get(field, ""))

    def add_entity(self, entity):
        entity['id'] = str(uuid.uuid4())
        self.entities.append(entity)
        self._write_to_json()

    def replace_entity(self, entity_id, new_entity):
        for i, entity in enumerate(self.entities):
            if entity['id'] == entity_id:
                self.entities[i] = new_entity
                self._write_to_json()
                return
        print(f"Entity with ID {entity_id} not found.")

    def delete_entity(self, entity_id):
        self.entities = [entity for entity in self.entities if entity['id'] != entity_id]
        self._write_to_json()

    def get_count(self):
        return len(self.entities)
